[package]
categories = ["api-bindings", "gui", "network-programming"]
description = "Компоненты для построения системы сбора, обработки и визуализации данных"
edition = "2024"
keywords = ["iot", "scada"]
license = "MIT OR Apache-2.0"
name = "rsiot"
readme = "README.md"
repository = "https://github.com/Konstantin-Dudersky/rsiot"
rust-version = "1.89.0"
version = "0.0.84"


[dependencies]
anyhow = { version = "1.0.99" }
bitvec = { version = "1.0.1" }
bytes = { version = "1.10.1" }
byteorder = { version = "1.5.0" }
# TODO - возможно заменить на time
chrono = { version = "0.4.42", features = ["serde"] }
crc = { version = "3.3.0" }
document-features = { version = "0.2.11" }
# TODO - заменить на web-time
instant = { version = "0.1.13", features = ["wasm-bindgen"] }
serde = { version = "1.0.225", features = ["derive"] }
strum = { version = "0.27.2", features = ["derive"] }
thiserror = { version = "2.0.16" }
time = { version = "0.3.43", features = ["formatting", "macros", "serde"] }
tracing = { version = "0.1.41", features = ["log"] }
uuid = { version = "1.18.1", features = [
    "macro-diagnostics",
    "serde",
    "v4",
    "js",
] }

any_spawner = { version = "0.3.0", optional = true }
async-trait = { version = "0.1.89", optional = true }
axum = { version = "0.8.4", optional = true }
bincode = { version = "1.3.3", optional = true }
clap = { version = "^4.4.18", features = ["derive"], optional = true }
console_error_panic_hook = { version = " 0.1.7", optional = true }
console-subscriber = { version = "0.4.1", optional = true }
dotenvy = { version = "0.15.7", optional = true }
embedded-graphics = { version = "0.8.1", optional = true }
embedded-svc = { version = "0.28.1", optional = true } # TODO - HTTP request content_len()
envy = { version = "0.4.2", optional = true }
heapless = { version = "=0.8", optional = true } # TODO - обновить после esp-idf-svc
hmac = { version = "0.12.1", optional = true }
http = { version = "1.3.1", optional = true }
jwt = { version = "0.16.0", optional = true }
futures = { version = "0.3.31", optional = true }
leptos = { version = "0.8.9", features = ["csr"], optional = true }
leptos_router = { version = "0.8.7", optional = true }
linux-embedded-hal = { version = "0.4.0", optional = true, features = [
    "async-tokio",
    "gpio_cdev",
    # "serial",
    "i2c",
    "spi",
], default-features = false }
log = { version = "0.4.28", optional = true }
postcard = { version = "1.1.3", features = [
    "use-std",
    "use-crc",
], optional = true }
quick-xml = { version = "0.38.3", optional = true }
reactive_stores = { version = "0.2.5", optional = true }
reqwest = { version = "0.12.23", features = ["json"], optional = true }
rumqttc = { version = "0.25.0", optional = true }
rppal = { version = "0.22.1", optional = true }
palette = { version = "0.7.6", features = ["named"], optional = true }
serde_json = { version = "1.0.145", optional = true }
sha2 = { version = "0.10.9", optional = true }
slint = { version = "1.13.1", optional = true }
socketcan = { version = "3.5.0", features = ["tokio"], optional = true }
sqlx = { version = "0.8.6", features = [
    "macros",
    "postgres",
    "runtime-tokio",
    "time",
], optional = true }
ssd1306 = { version = "0.10.0", optional = true }
sudo = { version = "0.6.0", optional = true }
surrealdb = { version = "2.3.9", optional = true }
sysinfo = { version = "0.37.0", optional = true }
teloxide = { version = "0.17.0", optional = true, features = ["macros"] }
tokio = { version = "^1.37.0", features = [
    "macros",
    "sync",
    "rt",
    "time",
    "tracing",
], optional = true }
tokio-metrics = { version = "0.4.5", optional = true }
tokio-modbus = { version = "0.16.4", default-features = false, features = [
    "tcp",
], optional = true }
tokio-tungstenite = { version = "0.27.0", optional = true }
tokio-util = { version = "0.7.16", features = ["rt"], optional = true }
toml = { version = "0.9.7", optional = true }
tracing-appender = { version = "0.2.3", optional = true }
tracing-subscriber = { version = "0.3.20", features = [
    "env-filter",
    "chrono",
], optional = true }
tower-http = { version = "0.6.6", features = [
    "cors",
    "trace",
], optional = true }
url = { version = "2.5.7", optional = true }
wasm-bindgen = { version = "0.2.103", optional = true }
web-sys = { version = "0.3.80", features = [
    "History",
    "Location",
    "Node",
    "NodeList",
    "Window",
    "HtmlIFrameElement",
], optional = true }
ws2812-esp32-rmt-driver = { version = "0.12.0", features = [
    "smart-leds-trait",
], optional = true }

rsiot-macros = { version = "0.0.73", path = "./rsiot-macros" }


[target.'cfg(target_arch = "wasm32")'.dependencies]
gloo = { version = "0.11.0", features = [
    "dialogs",
    "futures",
    "net",
    "storage",
    "timers",
    "utils",
] }
tracing-web = { version = "0.1.3", optional = true }
web-time = { version = "1.1.0", features = ["serde"] }


[target.'cfg(any(target_arch = "aarch64", target_arch = "arm", target_arch = "x86_64"))'.dependencies]
openssl = { version = "0.10", features = ["vendored"], optional = true }
tracing-loki = { version = "0.2.6", optional = true }


[target.'cfg(all(target_arch = "riscv32", target_vendor = "espressif", target_os = "espidf"))'.dependencies]
esp-idf-svc = { version = "0.51.0", features = ["std"] }


[target.'cfg(any(target_arch = "x86_64", target_arch = "aarch64", target_arch = "arm"))'.dev-dependencies]
tokio = { version = "^1.36.0", features = [
    "macros",
    "sync",
    "rt",
    "time",
    "rt-multi-thread",
] }


[dev-dependencies]
serde_json = { version = "1.0.145" }
tracing-subscriber = { version = "0.3.20", features = ["env-filter", "chrono"] }
itertools = "0.14.0"

[build-dependencies]
embuild = { version = "0.33.1", features = ["espidf"] }
cfg_aliases = "0.2.1"

[features]

# TODO - удалить serde-json из дефолтных фич, когда все компоненты будут готовы
default = ["serde_json"]

## Конфигурирование через переменные
env_vars = ["dep:clap", "dep:dotenvy", "dep:envy", "dep:toml", "dep:url"]

## Базовые компоненты
executor = ["dep:async-trait", "dep:futures", "dep:tokio", "dep:tokio-util"]

## Работа в однопоточном режиме
single-thread = []

serde_json = ["dep:serde_json"]
serde_postcard = ["dep:postcard"]
serde_toml = ["dep:toml"]

log_console = ["dep:tracing-subscriber"]
log_esp = ["dep:log", "dep:tracing-subscriber"]
log_file = ["dep:tracing-appender", "dep:tracing-subscriber"]
log_loki = [
    "dep:openssl",
    "dep:tokio",
    "dep:tracing-loki",
    "dep:tracing-subscriber",
    "dep:url",
]
log_tokio = [
    "dep:console-subscriber",
    "dep:tokio-metrics",
    "dep:tracing-subscriber",
]
log_webconsole = [
    "dep:console_error_panic_hook",
    "dep:tracing-subscriber",
    "dep:tracing-web",
]

## Компонент аутентификации
cmp_auth = ["executor", "dep:jwt", "dep:hmac", "dep:sha2"]

## Компонент для работы с микроконтроллером ESP
cmp_esp = [
    "executor",
    "single-thread",
    "log_esp",
    # TODO - удалить
    "serde_postcard",
    # TODO - удалить
    "dep:bincode",
    "dep:embedded-graphics",
    "dep:embedded-svc",
    "dep:heapless",
    "dep:ssd1306",
    "dep:ws2812-esp32-rmt-driver",
    "dep:url",
    "tokio?/time",
]

## Компонент http-клиент
cmp_http_client = [
    "executor",
    "dep:http",
    "dep:openssl",
    "dep:reqwest",
    "dep:url",
]

## Компонент http-клиент для платформы WASM
cmp_http_client_wasm = ["executor", "dep:http", "dep:url"]

## Компонент http-сервер
cmp_http_server = ["executor", "dep:axum", "dep:tower-http"]

## Компонент сохранения в БД InfluxDB
cmp_influxdb = ["executor", "dep:openssl", "dep:reqwest"]

## Комонент сохранения данных в файловой системе
cmp_filesystem = ["executor", "tokio?/fs"]

## Компонент для создания интерфейсов на базе Leptos
cmp_leptos = [
    "executor",
    "dep:any_spawner",
    "dep:leptos",
    "dep:palette",
    "dep:reactive_stores",
    "dep:url",
    "dep:wasm-bindgen",
    "dep:web-sys",
]

## Компонент для коммуникации через интерфейс CAN на системе Linux
cmp_linux_can = ["executor", "dep:socketcan", "dep:sudo"]

## Комонент для взаимодействия с GPIO на системе Linux
cmp_linux_gpio = ["executor", "dep:linux-embedded-hal"]

## Комонент для коммуникации через порт I2C
cmp_linux_i2c_master = ["executor", "dep:linux-embedded-hal"]

## Комонент для коммуникации через порт SPI
cmp_linux_spi_master = ["executor", "dep:linux-embedded-hal"]

## Комонент для коммуникации через порт UART
cmp_linux_uart_master = ["executor", "dep:linux-embedded-hal"]

## Компонент Modbus клиент
cmp_modbus_client = ["executor", "dep:tokio-modbus"]

## Компонент математической обработки данных
cmp_math = ["executor"]

## Комонент клиента MQTT
cmp_mqtt_client = ["executor", "dep:rumqttc"]

## Выполнение процесса ОС
cmp_os_process = ["executor", "tokio?/process"]

## Компонент ПЛК
cmp_plc = ["executor"]

## Работа с периферией Raspberry Pi
cmp_raspberrypi = ["executor", "dep:bincode", "serde_postcard", "dep:rppal"]

## Компонент пользовательского интерфейса, реализованного с помощью библиотеки Slint
cmp_slint = ["executor", "dep:slint"]

## Компонент доступа к БД SurrealDB
cmp_surrealdb = ["executor", "dep:surrealdb"]

## Изменения SVG-файла
cmp_svg = ["executor", "dep:quick-xml"]

## Компонент получает системную информацию
cmp_system_info = ["executor", "dep:sysinfo"]

## Компонент бота telegram
cmp_telegram = ["executor", "dep:openssl", "dep:teloxide"]

## Компонент сохранения в БД TimescaleDB
cmp_timescaledb = ["executor", "dep:sqlx", "dep:url"]

## Компонент websocket клиента
cmp_websocket_client = [
    "executor",
    "dep:futures",
    "dep:tokio-tungstenite",
    "dep:url",
]

## Компонент websocket клиента для платформы WASM
cmp_websocket_client_wasm = ["executor", "dep:futures", "dep:url"]

## Компонент websocket сервера
cmp_websocket_server = ["executor", "dep:futures", "dep:tokio-tungstenite"]

## Хранение и загрузка сообщений используя Web Storage API браузера
cmp_webstorage = ["executor"]

## Компиляция документации
rustdoc = []

## Устаревшие компоненты
deprecated = []


[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]
targets = ["x86_64-unknown-linux-gnu", "wasm32-unknown-unknown"]
cargo-args = ["-Zunstable-options", "-Zrustdoc-scrape-examples"]


[[example]]
name = "cmp_derive"
path = "examples/cmp_derive/cmp_derive.rs"

[[example]]
name = "cmp_external_fn_process"
path = "examples/cmp_external_fn_process/cmp_external_fn_process.rs"

[[example]]
name = "cmp_esp"
path = "examples/cmp_esp/cmp_esp.rs"
doc-scrape-examples = true

[[example]]
name = "cmp_esp_i2c_master_ads1115"
path = "./examples/cmp_esp/cmp_esp_i2c_master_ads1115.rs"

[[example]]
name = "cmp_esp_i2c_master_bmp180"
path = "./examples/cmp_esp/cmp_esp_i2c_master_bmp180.rs"

[[example]]
name = "cmp_esp_i2c_master_ds3231"
path = "./examples/cmp_esp/cmp_esp_i2c_master_ds3231.rs"

[[example]]
name = "cmp_esp_i2c_master_general"
path = "./examples/cmp_esp/cmp_esp_i2c_master_general.rs"

[[example]]
name = "cmp_esp_i2c_master_pca9555"
path = "./examples/cmp_esp/cmp_esp_i2c_master_pca9555.rs"

[[example]]
name = "cmp_esp_i2c_master_pcf8575"
path = "./examples/cmp_esp/cmp_esp_i2c_master_pcf8575.rs"

[[example]]
name = "cmp_esp_i2c_master_pm_di16"
path = "./examples/cmp_esp/cmp_esp_i2c_master_pm_di16.rs"

[[example]]
name = "cmp_esp_i2c_master_pm_rq8"
path = "./examples/cmp_esp/cmp_esp_i2c_master_pm_rq8.rs"

[[example]]
name = "cmp_esp_i2c_slave"
path = "./examples/cmp_esp/cmp_esp_i2c_slave.rs"

[[example]]
name = "cmp_esp_nvs"
path = "examples/cmp_esp_nvs/cmp_esp_nvs.rs"

[[example]]
name = "cmp_esp_led"
path = "examples/cmp_esp/cmp_esp_led.rs"

# TODO - скорее всего удалить

# [[example]]
# name = "cmp_linux_serial_master"
# path = "examples/cmp_raspberrypi/cmp_linux_serial_master/main.rs"

# [[example]]
# name = "cmp_raspberry_i2c_master_ads1115"
# path = "./examples/cmp_raspberrypi/cmp_raspberry_i2c_master_ads1115.rs"

# [[example]]
# name = "cmp_raspberry_i2c_master_bmp180"
# path = "./examples/cmp_raspberrypi/cmp_raspberry_i2c_master_bmp180.rs"

# [[example]]
# name = "cmp_raspberry_i2c_master_pcf8575"
# path = "./examples/cmp_raspberrypi/cmp_raspberry_i2c_master_pcf8575.rs"

# [[example]]
# name = "cmp_raspberry_i2c_master_pm_di16"
# path = "./examples/cmp_raspberrypi/cmp_raspberry_i2c_master_pm_di16.rs"

# [[example]]
# name = "cmp_raspberry_i2c_master_pm_rq8"
# path = "./examples/cmp_raspberrypi/cmp_raspberry_i2c_master_pm_rq8.rs"

[[example]]
name = "cmp_esp_http_server"
path = "examples/cmp_http_server_and_client/cmp_esp_http_server.rs"

[[example]]
name = "cmp_http_client"
path = "examples/cmp_http_server_and_client/cmp_http_client.rs"

[[example]]
name = "cmp_http_server"
path = "examples/cmp_http_server_and_client/cmp_http_server.rs"

[[example]]
name = "cmp_influxdb"
path = "examples/cmp_influxdb/cmp_influxdb.rs"

[[example]]
name = "cmp_inject_periodic"
path = "examples/cmp_inject_periodic/cmp_inject_periodic.rs"

[[example]]
name = "cmp_plc"
path = "examples/cmp_plc/cmp_plc/main.rs"

[[example]]
name = "cmp_plc_minimal"
path = "examples/cmp_plc/minimal/main.rs"

[[example]]
name = "config_plc_template"
path = "examples/cmp_plc/config_plc_template.rs"

[[example]]
name = "cmp_redis_client_publication"
path = "examples/cmp_redis_client/publication.rs"

[[example]]
name = "cmp_surrealdb"
path = "examples/cmp_surrealdb/cmp_surrealdb.rs"

[[example]]
name = "cmp_telegram"
path = "./examples/cmp_telegram/cmp_telegram.rs"

[[example]]
name = "cmp_websocket_client"
path = "examples/cmp_websocket_server_and_client/cmp_websocket_client.rs"

[[example]]
name = "cmp_websocket_server"
path = "examples/cmp_websocket_server_and_client/cmp_websocket_server.rs"

[[example]]
name = "executor_multi_thread"
path = "examples/executor/executor-multi-thread/main.rs"

[[example]]
name = "executor_single_thread"
path = "examples/executor/executor-single-thread/main.rs"

[[example]]
name = "env_vars"
path = "examples/env_vars/env_vars.rs"


[profile.release]
opt-level = "s"


[profile.dev]
debug = true
opt-level = "z"
