[package]
categories.workspace = true
description = "Метакрейт, импортирующий все другие крейты через флаги feature"
edition.workspace = true
keywords.workspace = true
license.workspace = true
name = "rsiot"
readme = "README.md"
repository.workspace = true
rust-version.workspace = true
version = "0.0.50"


[dependencies]
document-features = { workspace = true }

tokio = { workspace = true, optional = true }
chrono = { workspace = true }
url = { workspace = true }


rsiot-component-core = { workspace = true, optional = true }
rsiot-env-vars = { workspace = true, optional = true }
rsiot-extra-components = { workspace = true, optional = true }
rsiot-http-client = { workspace = true, optional = true }
rsiot-http-client-wasm = { workspace = true, optional = true }
rsiot-http-server = { workspace = true, optional = true }
rsiot-influxdb = { workspace = true, optional = true }
rsiot-leptos = { workspace = true, optional = true }
rsiot-logging = { workspace = true }
rsiot-messages-core = { workspace = true }
rsiot-modbus-client = { workspace = true, optional = true }
rsiot-plc = { workspace = true, optional = true }
rsiot-redis-client = { workspace = true, optional = true }
rsiot-surrealdb = { workspace = true, optional = true }
rsiot-websocket-client = { workspace = true, optional = true }
rsiot-websocket-client-wasm = { workspace = true, optional = true }
rsiot-websocket-server = { workspace = true, optional = true }
rsiot-timescaledb-storing = { workspace = true, optional = true }


[dev-dependencies]


[features]
## Базовые компоненты
components = [
    "dep:tokio",
    "dep:rsiot-extra-components",
    "dep:rsiot-component-core",
]
## Конфигурирование через переменные
env-vars = ["dep:rsiot-env-vars"]
## Компонент http-клиент
http-client = ["components", "dep:rsiot-http-client"]
## Компонент http-клиент для платформы WASM
http-client-wasm = ["components", "dep:rsiot-http-client-wasm"]
## Компонент http-сервер
http-server = ["components", "dep:rsiot-http-server"]
## Компонент сохранения в БД InfluxDB
influxdb = ["components", "dep:rsiot-influxdb"]
## Компонент для создания интерфейсов на базе Leptos
leptos = ["components", "dep:rsiot-leptos"]
## Компонент Modbus клиент
modbus-client = ["components", "dep:rsiot-modbus-client"]
# Компонент ПЛК
plc = ["components", "dep:rsiot-plc"]
## Компонент клиента Redis
redis-client = ["components", "dep:rsiot-redis-client"]
## Компонент доступа к БД SurrealDB
surrealdb = ["components", "dep:rsiot-surrealdb"]
## Компонент сохранения в БД TimescaleDB
timescaledb-storing = ["components", "dep:rsiot-timescaledb-storing"]
## Компонент websocket клиента
websocket-client = ["components", "dep:rsiot-websocket-client"]
## Компонент websocket клиента
websocket-client-wasm = ["components", "dep:rsiot-websocket-client-wasm"]
## Компонент websocket сервера
websocket-server = ["components", "dep:rsiot-websocket-server"]
## Работа в одном потоке, в LocalSet
single-thread = [
    "rsiot-component-core?/single-thread",
    "rsiot-extra-components?/single-thread",
    "rsiot-http-client?/single-thread",
    "rsiot-http-client-wasm?/single-thread",
    "rsiot-http-server?/single-thread",
    "rsiot-influxdb?/single-thread",
    "rsiot-leptos?/single-thread",
    "rsiot-modbus-client?/single-thread",
    "rsiot-plc?/single-thread",
    "rsiot-redis-client?/single-thread",
    "rsiot-surrealdb?/single-thread",
    "rsiot-timescaledb-storing?/single-thread",
    "rsiot-websocket-client?/single-thread",
    "rsiot-websocket-client-wasm?/single-thread",
    "rsiot-websocket-server?/single-thread",
]


[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]
