[package]
categories.workspace = true
description = "Метакрейт, импортирующий все другие крейты через флаги feature"
edition.workspace = true
keywords.workspace = true
license.workspace = true
name = "rsiot"
readme = "README.md"
repository.workspace = true
rust-version.workspace = true
version = "0.0.71"


[dependencies]
anyhow = { version = "1.0.80" }
async-trait = { version = "0.1.77" }
serde = { version = "1.0.197", features = ["derive"] }
thiserror = { version = "1.0.57" }
tracing = { version = "0.1.40", features = ["log"] }
tracing-subscriber = { version = "0.3.18", features = ["env-filter", "chrono"] }
chrono = { workspace = true }
url = { workspace = true }

axum = { version = "0.7.4", optional = true }
http = { version = "1.0.0", optional = true }
instant = { version = "0.1.12", features = ["wasm-bindgen"], optional = true }
jwt = { version = "0.16.0", optional = true }
futures = { version = "0.3.30", optional = true }
hmac = { version = "0.12.1", optional = true }
leptos = { version = "0.6.5", features = ["csr"], optional = true }
leptos_router = { version = "0.6.5", features = ["csr"], optional = true }
redis = { version = "0.24.0", features = ["tokio-comp"], optional = true }
reqwest = { version = "0.11.23", features = ["json"], optional = true }
palette = { version = "0.7.4", features = ["named"], optional = true }
sha2 = { version = "0.10.8", optional = true }
sqlx = { version = "0.7.3", features = [
    "chrono",
    "macros",
    "postgres",
    "runtime-tokio",
], optional = true }
surrealdb = { version = "1.2.0", optional = true }
tokio = { workspace = true, optional = true }
tokio-modbus = { version = "0.11.0", default-features = false, features = [
    "tcp",
], optional = true }
tokio-tungstenite = { version = "0.21.0", optional = true }
tokio-util = { version = "0.7.10", optional = true }
tower-http = { version = "0.5.1", features = [
    "cors",
    "trace",
], optional = true }
web-sys = { version = "0.3.68", features = [
    "Location",
    "Window",
], optional = true }

document-features = { workspace = true }

rsiot-macros = { workspace = true }
rsiot-component-core = { workspace = true, optional = true }
rsiot-env-vars = { workspace = true, optional = true }
rsiot-extra-components = { workspace = true, optional = true }
rsiot-logging = { workspace = true }
rsiot-messages-core = { workspace = true, features = ["serde-json"] }


[target.'cfg(target_arch = "wasm32")'.dependencies]
gloo = { version = "0.11.0", features = [
    "futures",
    "net",
    "storage",
    "timers",
    "utils",
], optional = true }


[dev-dependencies]
serde_json = { version = "1.0.114" }


[target.'cfg(target_arch = "aarch64")'.dependencies]
openssl = { version = "0.10", features = ["vendored"] }


[target.'cfg(any(target_arch = "x86_64", target_arch = "aarch64"))'.dev-dependencies]
tokio = { workspace = true, features = ["rt-multi-thread"] }


[features]
## Базовые компоненты
components = [
    "dep:tokio",
    "dep:rsiot-extra-components",
    "dep:rsiot-component-core",
]

## Компонент аутентификации
cmp_auth = ["components", "dep:jwt", "dep:hmac", "dep:sha2"]

## Конфигурирование через переменные
env-vars = ["dep:rsiot-env-vars"]

## Компонент http-клиент
cmp_http_client = ["components", "dep:http", "dep:reqwest"]

## Компонент http-клиент для платформы WASM
cmp_http_client_wasm = ["components", "dep:http", "dep:gloo"]

## Компонент http-сервер
cmp_http_server = ["components", "dep:axum", "dep:tower-http"]

## Компонент сохранения в БД InfluxDB
cmp_influxdb = ["components", "dep:reqwest"]

## Компонент для создания интерфейсов на базе Leptos
cmp_leptos = [
    "components",
    "dep:gloo",
    "dep:leptos",
    "dep:leptos_router",
    "dep:palette",
    "dep:web-sys",
]

## Компонент Modbus клиент
cmp_modbus_client = ["components", "dep:tokio-modbus"]

# Компонент ПЛК
cmp_plc = ["components", "dep:instant", "dep:gloo"]

## Компонент клиента Redis
cmp_redis_client = ["components", "dep:futures", "dep:redis"]

## Компонент доступа к БД SurrealDB
cmp_surrealdb = ["components", "dep:surrealdb"]

## Компонент сохранения в БД TimescaleDB
cmp_timescaledb = ["components", "dep:sqlx"]

## Компонент websocket клиента
cmp_websocket_client = ["components", "dep:futures", "dep:tokio-tungstenite"]

## Компонент websocket клиента
cmp_websocket_client_wasm = ["components", "dep:futures", "dep:gloo"]

## Компонент websocket сервера
cmp_websocket_server = [
    "components",
    "dep:futures",
    "dep:tokio-tungstenite",
    "dep:tokio-util",
]

## Хранение и загрузка сообщений используя Web Storage API браузера
cmp_webstorage = ["components", "dep:gloo"]

## Работа в одном потоке, в LocalSet
single-thread = [
    "rsiot-component-core?/single-thread",
    "rsiot-extra-components?/single-thread",
]


[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]


[[example]]
name = "cmp_derive"
path = "examples/cmp_derive/cmp_derive.rs"

[[example]]
name = "cmp_http_client"
path = "examples/cmp_http_client/cmp_http_client.rs"

[[example]]
name = "cmp_http_server"
path = "examples/cmp_http_server/cmp_http_server.rs"

[[example]]
name = "cmp_influxdb"
path = "examples/cmp_influxdb/cmp_influxdb.rs"

[[example]]
name = "create_signal_from_msg"
path = "examples/cmp_leptos/create_signal_from_msg.rs"

[[example]]
name = "cmp_plc"
path = "examples/cmp_plc/cmp_plc/main.rs"

[[example]]
name = "cmp_surrealdb"
path = "examples/cmp_surrealdb/cmp_surrealdb.rs"

[[example]]
name = "cmp_timescaledb"
path = "examples/cmp_timescaledb/cmp_timescaledb.rs"
