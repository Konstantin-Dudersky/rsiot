(function() {var type_impls = {
"rsiot":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Component%3CTConfig,+TMsg%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rsiot/executor/component/single_thread.rs.html#10-17\">source</a><a href=\"#impl-Component%3CTConfig,+TMsg%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;TConfig, TMsg&gt; <a class=\"struct\" href=\"rsiot/executor/struct.Component.html\" title=\"struct rsiot::executor::Component\">Component</a>&lt;TConfig, TMsg&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/rsiot/executor/component/single_thread.rs.html#11-16\">source</a><h4 class=\"code-header\">pub fn <a href=\"rsiot/executor/struct.Component.html#tymethod.new\" class=\"fn\">new</a>(config: impl Into&lt;TConfig&gt;) -&gt; Self</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples\"><a href=\"#scraped-examples\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example \" data-locs=\"[[[18,18],&quot;src/executor_single_thread/main.rs.html#34&quot;,&quot;line 34&quot;],[[19,19],&quot;src/executor_single_thread/main.rs.html#35&quot;,&quot;line 35&quot;]]\"><div class=\"scraped-example-title\">examples/executor/executor-single-thread/main.rs (<a href=\"src/executor_single_thread/main.rs.html#34\">line 34</a>)</div><div class=\"code-wrapper\"><button class=\"prev\">&pr;</button> <button class=\"next\">&sc;</button><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>16</span>\n<span>17</span>\n<span>18</span>\n<span>19</span>\n<span>20</span>\n<span>21</span>\n<span>22</span>\n<span>23</span>\n<span>24</span>\n<span>25</span>\n<span>26</span>\n<span>27</span>\n<span>28</span>\n<span>29</span>\n<span>30</span>\n<span>31</span>\n<span>32</span>\n<span>33</span>\n<span>34</span>\n<span>35</span>\n<span>36</span>\n<span>37</span>\n<span>38</span>\n<span>39</span>\n<span>40</span>\n<span>41</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button><span class=\"kw\">async fn </span>main() {\n    <span class=\"kw\">use </span>message::Message;\n    <span class=\"kw\">use </span>tokio::task::LocalSet;\n\n    <span class=\"kw\">use </span>rsiot::executor::{ComponentExecutor, ComponentExecutorConfig};\n\n    tracing_subscriber::fmt().init();\n\n    <span class=\"kw\">let </span>local_set = LocalSet::new();\n\n    <span class=\"kw\">let </span>executor_config = ComponentExecutorConfig {\n        buffer_size: <span class=\"number\">100</span>,\n        executor_name: <span class=\"string\">\"example_single_thread\"</span>.into(),\n        fn_auth: |<span class=\"kw\">_</span>, <span class=\"kw\">_</span>| <span class=\"prelude-val\">None</span>,\n    };\n\n    local_set.spawn_local(<span class=\"kw\">async </span>{\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cmps = ComponentExecutor::&lt;Message&gt;::new(executor_config)\n            .add_cmp(<span class=\"highlight focus\">example_component1::Cmp::new</span>(example_component1::Config {}))\n            .add_cmp(<span class=\"highlight\">example_component2::Cmp::new</span>(example_component2::Config {}));\n\n        cmps.wait_result().<span class=\"kw\">await</span>.unwrap();\n    });\n\n    local_set.<span class=\"kw\">await</span>;\n}</code></pre></div></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example \" data-locs=\"[[[40,40],&quot;src/cmp_inject_periodic/cmp_inject_periodic.rs.html#50&quot;,&quot;line 50&quot;],[[41,41],&quot;src/cmp_inject_periodic/cmp_inject_periodic.rs.html#51&quot;,&quot;line 51&quot;]]\"><div class=\"scraped-example-title\">examples/cmp_inject_periodic/cmp_inject_periodic.rs (<a href=\"src/cmp_inject_periodic/cmp_inject_periodic.rs.html#50\">line 50</a>)</div><div class=\"code-wrapper\"><button class=\"prev\">&pr;</button> <button class=\"next\">&sc;</button><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>10</span>\n<span>11</span>\n<span>12</span>\n<span>13</span>\n<span>14</span>\n<span>15</span>\n<span>16</span>\n<span>17</span>\n<span>18</span>\n<span>19</span>\n<span>20</span>\n<span>21</span>\n<span>22</span>\n<span>23</span>\n<span>24</span>\n<span>25</span>\n<span>26</span>\n<span>27</span>\n<span>28</span>\n<span>29</span>\n<span>30</span>\n<span>31</span>\n<span>32</span>\n<span>33</span>\n<span>34</span>\n<span>35</span>\n<span>36</span>\n<span>37</span>\n<span>38</span>\n<span>39</span>\n<span>40</span>\n<span>41</span>\n<span>42</span>\n<span>43</span>\n<span>44</span>\n<span>45</span>\n<span>46</span>\n<span>47</span>\n<span>48</span>\n<span>49</span>\n<span>50</span>\n<span>51</span>\n<span>52</span>\n<span>53</span>\n<span>54</span>\n<span>55</span>\n<span>56</span>\n<span>57</span>\n<span>58</span>\n<span>59</span>\n<span>60</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button><span class=\"kw\">async fn </span>main() -&gt; anyhow::Result&lt;()&gt; {\n    <span class=\"kw\">use </span>tokio::{task::LocalSet, time::Duration};\n    <span class=\"kw\">use </span>tracing::{level_filters::LevelFilter, Level};\n\n    <span class=\"kw\">use </span>rsiot::{\n        components::{cmp_inject_periodic, cmp_logger},\n        executor::{ComponentExecutor, ComponentExecutorConfig},\n        message::{example_message::<span class=\"kw-2\">*</span>, Message},\n    };\n\n    tracing_subscriber::fmt()\n        .with_max_level(LevelFilter::DEBUG)\n        .init();\n\n    <span class=\"kw\">let </span>executor_config = ComponentExecutorConfig {\n        buffer_size: <span class=\"number\">100</span>,\n        executor_name: <span class=\"string\">\"cmp_inject_periodic\"</span>.into(),\n        fn_auth: |msg, <span class=\"kw\">_</span>| <span class=\"prelude-val\">Some</span>(msg),\n    };\n\n    <span class=\"kw\">let </span>logger_config = cmp_logger::Config {\n        level: Level::INFO,\n        header: <span class=\"string\">\"Logger: \"</span>.into(),\n    };\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>counter = <span class=\"number\">0.0</span>;\n    <span class=\"kw\">let </span>inject_config = cmp_inject_periodic::Config {\n        period: Duration::from_secs(<span class=\"number\">2</span>),\n        fn_periodic: <span class=\"kw\">move </span>|| {\n            <span class=\"kw\">let </span>msg = Custom::ValueInstantF64(counter);\n            <span class=\"kw\">let </span>msg = Message::new_custom(msg);\n            counter += <span class=\"number\">1.0</span>;\n            <span class=\"macro\">vec!</span>[msg]\n        },\n    };\n\n    <span class=\"kw\">let </span>local_set = LocalSet::new();\n\n    local_set.spawn_local(<span class=\"kw\">async </span>{\n        ComponentExecutor::&lt;Custom&gt;::new(executor_config)\n            .add_cmp(<span class=\"highlight focus\">cmp_logger::Cmp::new</span>(logger_config))\n            .add_cmp(<span class=\"highlight\">cmp_inject_periodic::Cmp::new</span>(inject_config))\n            .wait_result()\n            .<span class=\"kw\">await\n            </span>.unwrap();\n    });\n\n    local_set.<span class=\"kw\">await</span>;\n\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre></div></div></div><div class=\"scraped-example \" data-locs=\"[[[56,56],&quot;src/cmp_external_fn_process/cmp_external_fn_process.rs.html#67&quot;,&quot;line 67&quot;]]\"><div class=\"scraped-example-title\">examples/cmp_external_fn_process/cmp_external_fn_process.rs (<a href=\"src/cmp_external_fn_process/cmp_external_fn_process.rs.html#67\">line 67</a>)</div><div class=\"code-wrapper\"><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>11</span>\n<span>12</span>\n<span>13</span>\n<span>14</span>\n<span>15</span>\n<span>16</span>\n<span>17</span>\n<span>18</span>\n<span>19</span>\n<span>20</span>\n<span>21</span>\n<span>22</span>\n<span>23</span>\n<span>24</span>\n<span>25</span>\n<span>26</span>\n<span>27</span>\n<span>28</span>\n<span>29</span>\n<span>30</span>\n<span>31</span>\n<span>32</span>\n<span>33</span>\n<span>34</span>\n<span>35</span>\n<span>36</span>\n<span>37</span>\n<span>38</span>\n<span>39</span>\n<span>40</span>\n<span>41</span>\n<span>42</span>\n<span>43</span>\n<span>44</span>\n<span>45</span>\n<span>46</span>\n<span>47</span>\n<span>48</span>\n<span>49</span>\n<span>50</span>\n<span>51</span>\n<span>52</span>\n<span>53</span>\n<span>54</span>\n<span>55</span>\n<span>56</span>\n<span>57</span>\n<span>58</span>\n<span>59</span>\n<span>60</span>\n<span>61</span>\n<span>62</span>\n<span>63</span>\n<span>64</span>\n<span>65</span>\n<span>66</span>\n<span>67</span>\n<span>68</span>\n<span>69</span>\n<span>70</span>\n<span>71</span>\n<span>72</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button><span class=\"kw\">async fn </span>main() {\n    <span class=\"kw\">use </span>std::time::Duration;\n\n    <span class=\"attr\">#[cfg(not(feature = <span class=\"string\">\"single-thread\"</span>))]\n    </span><span class=\"kw\">use </span>futures::future::BoxFuture;\n    <span class=\"attr\">#[cfg(feature = <span class=\"string\">\"single-thread\"</span>)]\n    </span><span class=\"kw\">use </span>futures::future::LocalBoxFuture;\n    <span class=\"kw\">use </span>tokio::{task::LocalSet, time::sleep};\n    <span class=\"kw\">use </span>tracing::{info, level_filters::LevelFilter};\n\n    <span class=\"kw\">use </span>rsiot::{\n        components::cmp_external_fn_process,\n        executor::{CmpInOut, ComponentExecutor, ComponentExecutorConfig, ComponentResult},\n        message::{example_message::<span class=\"kw-2\">*</span>, <span class=\"kw-2\">*</span>},\n    };\n\n    <span class=\"kw\">async fn </span>fn_process&lt;TMsg&gt;(_input: CmpInOut&lt;TMsg&gt;) -&gt; ComponentResult {\n        <span class=\"kw\">loop </span>{\n            <span class=\"macro\">info!</span>(<span class=\"string\">\"External fn process\"</span>);\n            sleep(Duration::from_secs(<span class=\"number\">2</span>)).<span class=\"kw\">await</span>;\n        }\n    }\n\n    <span class=\"attr\">#[cfg(feature = <span class=\"string\">\"single-thread\"</span>)]\n    </span><span class=\"kw\">fn </span>fn_process_wrapper&lt;TMsg&gt;(input: CmpInOut&lt;TMsg&gt;) -&gt; LocalBoxFuture&lt;<span class=\"lifetime\">'static</span>, ComponentResult&gt;\n    <span class=\"kw\">where\n        </span>TMsg: MsgDataBound + <span class=\"lifetime\">'static</span>,\n    {\n        Box::pin(<span class=\"kw\">async </span>{ fn_process(input).<span class=\"kw\">await </span>})\n    }\n\n    <span class=\"attr\">#[cfg(not(feature = <span class=\"string\">\"single-thread\"</span>))]\n    </span><span class=\"kw\">fn </span>fn_process_wrapper&lt;TMsg&gt;(input: CmpInOut&lt;TMsg&gt;) -&gt; BoxFuture&lt;<span class=\"lifetime\">'static</span>, ComponentResult&gt;\n    <span class=\"kw\">where\n        </span>TMsg: MsgDataBound + <span class=\"lifetime\">'static</span>,\n    {\n        Box::pin(<span class=\"kw\">async </span>{ fn_process(input).<span class=\"kw\">await </span>})\n    }\n\n    tracing_subscriber::fmt()\n        .with_max_level(LevelFilter::DEBUG)\n        .init();\n\n    <span class=\"kw\">let </span>config_external_process = cmp_external_fn_process::Config {\n        fn_process: Box::new(fn_process_wrapper),\n    };\n\n    <span class=\"kw\">let </span>executor_config = ComponentExecutorConfig {\n        buffer_size: <span class=\"number\">100</span>,\n        executor_name: <span class=\"string\">\"cmp_external_fn_process_single_thread\"</span>.into(),\n        fn_auth: |msg, <span class=\"kw\">_</span>| <span class=\"prelude-val\">Some</span>(msg),\n    };\n\n    <span class=\"kw\">let </span>task_set = LocalSet::new();\n    task_set.spawn_local(<span class=\"kw\">async move </span>{\n        ComponentExecutor::&lt;Custom&gt;::new(executor_config)\n            .add_cmp(<span class=\"highlight focus\">cmp_external_fn_process::Cmp::new</span>(config_external_process))\n            .wait_result()\n            .<span class=\"kw\">await\n    </span>});\n    task_set.<span class=\"kw\">await</span>;\n}</code></pre></div></div></div><div class=\"scraped-example \" data-locs=\"[[[77,77],&quot;src/cmp_esp/cmp_esp.rs.html#84&quot;,&quot;line 84&quot;],[[78,78],&quot;src/cmp_esp/cmp_esp.rs.html#85&quot;,&quot;line 85&quot;],[[79,79],&quot;src/cmp_esp/cmp_esp.rs.html#86&quot;,&quot;line 86&quot;],[[80,80],&quot;src/cmp_esp/cmp_esp.rs.html#87&quot;,&quot;line 87&quot;]]\"><div class=\"scraped-example-title\">examples/cmp_esp/cmp_esp.rs (<a href=\"src/cmp_esp/cmp_esp.rs.html#84\">line 84</a>)</div><div class=\"code-wrapper\"><button class=\"prev\">&pr;</button> <button class=\"next\">&sc;</button><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>7</span>\n<span>8</span>\n<span>9</span>\n<span>10</span>\n<span>11</span>\n<span>12</span>\n<span>13</span>\n<span>14</span>\n<span>15</span>\n<span>16</span>\n<span>17</span>\n<span>18</span>\n<span>19</span>\n<span>20</span>\n<span>21</span>\n<span>22</span>\n<span>23</span>\n<span>24</span>\n<span>25</span>\n<span>26</span>\n<span>27</span>\n<span>28</span>\n<span>29</span>\n<span>30</span>\n<span>31</span>\n<span>32</span>\n<span>33</span>\n<span>34</span>\n<span>35</span>\n<span>36</span>\n<span>37</span>\n<span>38</span>\n<span>39</span>\n<span>40</span>\n<span>41</span>\n<span>42</span>\n<span>43</span>\n<span>44</span>\n<span>45</span>\n<span>46</span>\n<span>47</span>\n<span>48</span>\n<span>49</span>\n<span>50</span>\n<span>51</span>\n<span>52</span>\n<span>53</span>\n<span>54</span>\n<span>55</span>\n<span>56</span>\n<span>57</span>\n<span>58</span>\n<span>59</span>\n<span>60</span>\n<span>61</span>\n<span>62</span>\n<span>63</span>\n<span>64</span>\n<span>65</span>\n<span>66</span>\n<span>67</span>\n<span>68</span>\n<span>69</span>\n<span>70</span>\n<span>71</span>\n<span>72</span>\n<span>73</span>\n<span>74</span>\n<span>75</span>\n<span>76</span>\n<span>77</span>\n<span>78</span>\n<span>79</span>\n<span>80</span>\n<span>81</span>\n<span>82</span>\n<span>83</span>\n<span>84</span>\n<span>85</span>\n<span>86</span>\n<span>87</span>\n<span>88</span>\n<span>89</span>\n<span>90</span>\n<span>91</span>\n<span>92</span>\n<span>93</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button><span class=\"kw\">async fn </span>main() {\n    <span class=\"kw\">use </span>esp_idf_svc::{\n        eventloop::EspSystemEventLoop,\n        hal::{gpio::PinDriver, peripherals::Peripherals},\n        log::EspLogger,\n        sys::link_patches,\n        wifi::EspWifi,\n    };\n    <span class=\"kw\">use </span>tokio::task::LocalSet;\n    <span class=\"kw\">use </span>tracing::Level;\n\n    <span class=\"kw\">use </span>rsiot::{\n        components::{cmp_esp_gpio_input, cmp_esp_wifi, cmp_http_server_esp, cmp_logger},\n        executor::{ComponentExecutor, ComponentExecutorConfig},\n        message::<span class=\"kw-2\">*</span>,\n    };\n\n    link_patches();\n    EspLogger::initialize_default();\n\n    <span class=\"comment\">// message\n    </span><span class=\"attr\">#[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]\n    </span><span class=\"kw\">pub enum </span>Custom {\n        BootButton(bool),\n    }\n\n    <span class=\"kw\">impl </span>MsgDataBound <span class=\"kw\">for </span>Custom {}\n\n    <span class=\"comment\">// cmp_http_server_esp -------------------------------------------------------------------------\n    </span><span class=\"kw\">let </span>http_server_esp_config = cmp_http_server_esp::Config {\n        port: <span class=\"number\">8010</span>,\n        fn_input: |msg: <span class=\"kw-2\">&amp;</span>Message&lt;Custom&gt;| {\n            <span class=\"kw\">let </span>text = msg.serialize()<span class=\"question-mark\">?</span>;\n            <span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">Some</span>(text))\n        },\n        fn_output: |text: <span class=\"kw-2\">&amp;</span>str| {\n            <span class=\"kw\">let </span>msg = Message::deserialize(text)<span class=\"question-mark\">?</span>;\n            <span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">Some</span>(msg))\n        },\n    };\n\n    <span class=\"comment\">// cmp_logger ----------------------------------------------------------------------------------\n    </span><span class=\"kw\">let </span>logger_config = cmp_logger::Config {\n        level: Level::INFO,\n        header: <span class=\"string\">\"\"</span>.into(),\n    };\n\n    <span class=\"comment\">// ESP -----------------------------------------------------------------------------------------\n    </span><span class=\"kw\">let </span>peripherals = Peripherals::take().unwrap();\n    <span class=\"kw\">let </span>event_loop = EspSystemEventLoop::take().unwrap();\n\n    <span class=\"comment\">// wifi\n    </span><span class=\"kw\">let </span>wifi_config = cmp_esp_wifi::Config::&lt;Custom&gt; {\n        fn_input: |<span class=\"kw\">_</span>| <span class=\"prelude-val\">None</span>,\n        fn_output: |<span class=\"kw\">_</span>| <span class=\"macro\">vec!</span>[],\n        event_loop: event_loop.clone(),\n        driver: EspWifi::new(peripherals.modem, event_loop.clone(), <span class=\"prelude-val\">None</span>).unwrap(),\n    };\n\n    <span class=\"comment\">// GPIO9 - button Boot\n    </span><span class=\"kw\">let </span>gpio9_config = cmp_esp_gpio_input::Config {\n        fn_output: |value| Message::new_custom(Custom::BootButton(value)),\n        driver: PinDriver::input(peripherals.pins.gpio9).unwrap(),\n    };\n\n    <span class=\"comment\">// executor ------------------------------------------------------------------------------------\n\n    </span><span class=\"kw\">let </span>executor_config = ComponentExecutorConfig {\n        buffer_size: <span class=\"number\">10</span>,\n        executor_name: <span class=\"string\">\"cmp_http_server_esp_example\"</span>.into(),\n        fn_auth: |msg, <span class=\"kw\">_</span>| <span class=\"prelude-val\">Some</span>(msg),\n    };\n\n    <span class=\"kw\">let </span>local_set = LocalSet::new();\n\n    local_set.spawn_local(<span class=\"kw\">async </span>{\n        ComponentExecutor::&lt;Custom&gt;::new(executor_config)\n            .add_cmp(<span class=\"highlight focus\">cmp_logger::Cmp::new</span>(logger_config))\n            .add_cmp(<span class=\"highlight\">cmp_http_server_esp::Cmp::new</span>(http_server_esp_config))\n            .add_cmp(<span class=\"highlight\">cmp_esp_wifi::Cmp::new</span>(wifi_config))\n            .add_cmp(<span class=\"highlight\">cmp_esp_gpio_input::Cmp::new</span>(gpio9_config))\n            .wait_result()\n            .<span class=\"kw\">await\n            </span>.unwrap()\n    });\n    local_set.<span class=\"kw\">await</span>;\n}</code></pre></div></div></div><div class=\"scraped-example \" data-locs=\"[[[90,90],&quot;src/cmp_derive/cmp_derive.rs.html#103&quot;,&quot;line 103&quot;],[[91,91],&quot;src/cmp_derive/cmp_derive.rs.html#104&quot;,&quot;line 104&quot;],[[92,92],&quot;src/cmp_derive/cmp_derive.rs.html#105&quot;,&quot;line 105&quot;]]\"><div class=\"scraped-example-title\">examples/cmp_derive/cmp_derive.rs (<a href=\"src/cmp_derive/cmp_derive.rs.html#103\">line 103</a>)</div><div class=\"code-wrapper\"><button class=\"prev\">&pr;</button> <button class=\"next\">&sc;</button><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>13</span>\n<span>14</span>\n<span>15</span>\n<span>16</span>\n<span>17</span>\n<span>18</span>\n<span>19</span>\n<span>20</span>\n<span>21</span>\n<span>22</span>\n<span>23</span>\n<span>24</span>\n<span>25</span>\n<span>26</span>\n<span>27</span>\n<span>28</span>\n<span>29</span>\n<span>30</span>\n<span>31</span>\n<span>32</span>\n<span>33</span>\n<span>34</span>\n<span>35</span>\n<span>36</span>\n<span>37</span>\n<span>38</span>\n<span>39</span>\n<span>40</span>\n<span>41</span>\n<span>42</span>\n<span>43</span>\n<span>44</span>\n<span>45</span>\n<span>46</span>\n<span>47</span>\n<span>48</span>\n<span>49</span>\n<span>50</span>\n<span>51</span>\n<span>52</span>\n<span>53</span>\n<span>54</span>\n<span>55</span>\n<span>56</span>\n<span>57</span>\n<span>58</span>\n<span>59</span>\n<span>60</span>\n<span>61</span>\n<span>62</span>\n<span>63</span>\n<span>64</span>\n<span>65</span>\n<span>66</span>\n<span>67</span>\n<span>68</span>\n<span>69</span>\n<span>70</span>\n<span>71</span>\n<span>72</span>\n<span>73</span>\n<span>74</span>\n<span>75</span>\n<span>76</span>\n<span>77</span>\n<span>78</span>\n<span>79</span>\n<span>80</span>\n<span>81</span>\n<span>82</span>\n<span>83</span>\n<span>84</span>\n<span>85</span>\n<span>86</span>\n<span>87</span>\n<span>88</span>\n<span>89</span>\n<span>90</span>\n<span>91</span>\n<span>92</span>\n<span>93</span>\n<span>94</span>\n<span>95</span>\n<span>96</span>\n<span>97</span>\n<span>98</span>\n<span>99</span>\n<span>100</span>\n<span>101</span>\n<span>102</span>\n<span>103</span>\n<span>104</span>\n<span>105</span>\n<span>106</span>\n<span>107</span>\n<span>108</span>\n<span>109</span>\n<span>110</span>\n<span>111</span>\n<span>112</span>\n<span>113</span>\n<span>114</span>\n<span>115</span>\n<span>116</span>\n<span>117</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button><span class=\"kw\">fn </span>main() -&gt; anyhow::Result&lt;()&gt; {\n    <span class=\"kw\">use </span>std::time::Duration;\n\n    <span class=\"kw\">use </span>tokio::runtime;\n    <span class=\"attr\">#[cfg(feature = <span class=\"string\">\"single-thread\"</span>)]\n    </span><span class=\"kw\">use </span>tokio::task::LocalSet;\n    <span class=\"kw\">use </span>tracing::Level;\n\n    <span class=\"kw\">use </span>rsiot::{\n        components::{\n            cmp_derive::{<span class=\"self\">self</span>, DeriveItem},\n            cmp_inject_periodic, cmp_logger,\n        },\n        executor::{ComponentExecutor, ComponentExecutorConfig},\n        message::{example_message::<span class=\"kw-2\">*</span>, <span class=\"kw-2\">*</span>},\n    };\n\n    tracing_subscriber::fmt().init();\n\n    <span class=\"attr\">#[derive(Clone, Default, PartialEq)]\n    </span><span class=\"kw\">struct </span>ValueInstantString {\n        <span class=\"kw\">pub </span>f64: <span class=\"prelude-ty\">Option</span>&lt;f64&gt;,\n        <span class=\"kw\">pub </span>bool: <span class=\"prelude-ty\">Option</span>&lt;bool&gt;,\n    }\n\n    <span class=\"kw\">let </span>derive_config = cmp_derive::Config {\n        derive_items: <span class=\"macro\">vec!</span>[Box::new(DeriveItem {\n            store: ValueInstantString::default(),\n            fn_input: |msg, store| <span class=\"kw\">match </span><span class=\"kw-2\">&amp;</span>msg.data {\n                MsgData::Custom(data) =&gt; <span class=\"kw\">match </span>data {\n                    Custom::ValueInstantF64(content) =&gt; store.f64 = <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">*</span>content),\n                    Custom::ValueInstantBool(content) =&gt; store.bool = <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">*</span>content),\n                    <span class=\"kw\">_ </span>=&gt; (),\n                },\n                MsgData::System(<span class=\"kw\">_</span>) =&gt; (),\n            },\n            fn_output: |store| {\n                <span class=\"kw\">let </span>msg_content =\n                    <span class=\"macro\">format!</span>(<span class=\"string\">\"New Message: bool: {}, f64: {}\"</span>, store.bool<span class=\"question-mark\">?</span>, store.f64<span class=\"question-mark\">?</span>);\n                <span class=\"kw\">let </span>msg = Message::new(MsgData::Custom(Custom::ValueInstantString(msg_content)));\n                <span class=\"prelude-val\">Some</span>(<span class=\"macro\">vec!</span>[msg])\n            },\n        })],\n    };\n\n    <span class=\"kw\">let </span>logger_config = cmp_logger::Config {\n        level: Level::INFO,\n        header: <span class=\"string\">\"\"</span>.into(),\n    };\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>counter = <span class=\"number\">0.0</span>;\n    <span class=\"kw\">let </span>inject_periodic_config = cmp_inject_periodic::Config {\n        period: Duration::from_secs(<span class=\"number\">2</span>),\n        fn_periodic: <span class=\"kw\">move </span>|| {\n            <span class=\"kw\">let </span>msg1 = Message::new_custom(Custom::ValueInstantF64(counter));\n            <span class=\"kw\">let </span>msg2 = Message::new_custom(Custom::ValueInstantBool(<span class=\"bool-val\">true</span>));\n            counter += <span class=\"number\">1.0</span>;\n            <span class=\"macro\">vec!</span>[msg1, msg2]\n        },\n    };\n\n    <span class=\"kw\">let </span>executor_config = ComponentExecutorConfig {\n        buffer_size: <span class=\"number\">100</span>,\n        executor_name: <span class=\"string\">\"example_single_thread\"</span>.into(),\n        fn_auth: |msg, <span class=\"kw\">_</span>| <span class=\"prelude-val\">Some</span>(msg),\n    };\n\n    <span class=\"attr\">#[cfg(not(feature = <span class=\"string\">\"single-thread\"</span>))]\n    </span>runtime::Builder::new_multi_thread()\n        .enable_all()\n        .build()<span class=\"question-mark\">?\n        </span>.block_on(<span class=\"kw\">async move </span>{\n            ComponentExecutor::new(executor_config)\n                .add_cmp(cmp_derive::Cmp::new(derive_config))\n                .add_cmp(cmp_logger::Cmp::new(logger_config))\n                .add_cmp(cmp_inject_periodic::Cmp::new(inject_periodic_config))\n                .wait_result()\n                .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n            <span class=\"prelude-val\">Ok</span>(()) <span class=\"kw\">as </span>anyhow::Result&lt;()&gt;\n        })<span class=\"question-mark\">?</span>;\n\n    <span class=\"attr\">#[cfg(feature = <span class=\"string\">\"single-thread\"</span>)]\n    </span>runtime::Builder::new_current_thread()\n        .enable_all()\n        .build()<span class=\"question-mark\">?\n        </span>.block_on(<span class=\"kw\">async move </span>{\n            <span class=\"kw\">let </span>local_set = LocalSet::new();\n\n            local_set.spawn_local(<span class=\"kw\">async move </span>{\n                ComponentExecutor::new(executor_config)\n                    .add_cmp(<span class=\"highlight focus\">cmp_derive::Cmp::new</span>(derive_config))\n                    .add_cmp(<span class=\"highlight\">cmp_logger::Cmp::new</span>(logger_config))\n                    .add_cmp(<span class=\"highlight\">cmp_inject_periodic::Cmp::new</span>(inject_periodic_config))\n                    .wait_result()\n                    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n                <span class=\"prelude-val\">Ok</span>(()) <span class=\"kw\">as </span>anyhow::Result&lt;()&gt;\n            });\n\n            local_set.<span class=\"kw\">await</span>;\n\n            <span class=\"prelude-val\">Ok</span>(()) <span class=\"kw\">as </span>anyhow::Result&lt;()&gt;\n        })<span class=\"question-mark\">?</span>;\n\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre></div></div></div></div></details></div></details></div></details>",0,"rsiot::components::cmp_add_input_stream::Cmp","rsiot::components::cmp_add_output_stream::Cmp","rsiot::components::cmp_derive::component::Cmp","rsiot::components::cmp_esp_gpio_input::component::Cmp","rsiot::components::cmp_esp_wifi::component::Cmp","rsiot::components::cmp_external_fn_process::Cmp","rsiot::components::cmp_http_server_esp::component::Cmp","rsiot::components::cmp_inject_periodic::Cmp","rsiot::components::cmp_logger::Cmp","rsiot::components::cmp_storage_esp::component::Cmp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IComponentProcess%3CConfig%3CTMsg,+TFnPeriodic%3E,+TMsg%3E-for-Component%3CConfig%3CTMsg,+TFnPeriodic%3E,+TMsg%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rsiot/components/cmp_inject_periodic/mod.rs.html#28-45\">source</a><a href=\"#impl-IComponentProcess%3CConfig%3CTMsg,+TFnPeriodic%3E,+TMsg%3E-for-Component%3CConfig%3CTMsg,+TFnPeriodic%3E,+TMsg%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;TMsg, TFnPeriodic&gt; <a class=\"trait\" href=\"rsiot/executor/trait.IComponentProcess.html\" title=\"trait rsiot::executor::IComponentProcess\">IComponentProcess</a>&lt;<a class=\"struct\" href=\"rsiot/components/cmp_inject_periodic/struct.Config.html\" title=\"struct rsiot::components::cmp_inject_periodic::Config\">Config</a>&lt;TMsg, TFnPeriodic&gt;, TMsg&gt; for <a class=\"struct\" href=\"rsiot/executor/struct.Component.html\" title=\"struct rsiot::executor::Component\">Component</a>&lt;<a class=\"struct\" href=\"rsiot/components/cmp_inject_periodic/struct.Config.html\" title=\"struct rsiot::components::cmp_inject_periodic::Config\">Config</a>&lt;TMsg, TFnPeriodic&gt;, TMsg&gt;<div class=\"where\">where\n    TMsg: <a class=\"trait\" href=\"rsiot/message/trait.MsgDataBound.html\" title=\"trait rsiot::message::MsgDataBound\">MsgDataBound</a>,\n    TFnPeriodic: FnMut() -&gt; Vec&lt;<a class=\"struct\" href=\"rsiot/message/struct.Message.html\" title=\"struct rsiot::message::Message\">Message</a>&lt;TMsg&gt;&gt; + Send + Sync,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.process\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rsiot/components/cmp_inject_periodic/mod.rs.html#34-44\">source</a><a href=\"#method.process\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"rsiot/executor/trait.IComponentProcess.html#tymethod.process\" class=\"fn\">process</a>&lt;'life0, 'async_trait&gt;(\n    &amp;'life0 self,\n    config: <a class=\"struct\" href=\"rsiot/components/cmp_inject_periodic/struct.Config.html\" title=\"struct rsiot::components::cmp_inject_periodic::Config\">Config</a>&lt;TMsg, TFnPeriodic&gt;,\n    in_out: <a class=\"struct\" href=\"rsiot/executor/struct.CmpInOut.html\" title=\"struct rsiot::executor::CmpInOut\">CmpInOut</a>&lt;TMsg&gt;\n) -&gt; Pin&lt;Box&lt;dyn Future&lt;Output = Result&lt;(), <a class=\"enum\" href=\"rsiot/executor/enum.ComponentError.html\" title=\"enum rsiot::executor::ComponentError\">ComponentError</a>&gt;&gt; + 'async_trait&gt;&gt;<div class=\"where\">where\n    Self: 'async_trait,\n    'life0: 'async_trait,</div></h4></section></div></details>","IComponentProcess<Config<TMsg, TFnPeriodic>, TMsg>","rsiot::components::cmp_inject_periodic::Cmp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IComponentProcess%3CCfg%3CTMsg%3E,+TMsg%3E-for-Component%3CCfg%3CTMsg%3E,+TMsg%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rsiot/components/cmp_add_output_stream/mod.rs.html#19-35\">source</a><a href=\"#impl-IComponentProcess%3CCfg%3CTMsg%3E,+TMsg%3E-for-Component%3CCfg%3CTMsg%3E,+TMsg%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;TMsg&gt; <a class=\"trait\" href=\"rsiot/executor/trait.IComponentProcess.html\" title=\"trait rsiot::executor::IComponentProcess\">IComponentProcess</a>&lt;<a class=\"struct\" href=\"rsiot/components/cmp_add_output_stream/struct.Cfg.html\" title=\"struct rsiot::components::cmp_add_output_stream::Cfg\">Cfg</a>&lt;TMsg&gt;, TMsg&gt; for <a class=\"struct\" href=\"rsiot/executor/struct.Component.html\" title=\"struct rsiot::executor::Component\">Component</a>&lt;<a class=\"struct\" href=\"rsiot/components/cmp_add_output_stream/struct.Cfg.html\" title=\"struct rsiot::components::cmp_add_output_stream::Cfg\">Cfg</a>&lt;TMsg&gt;, TMsg&gt;<div class=\"where\">where\n    TMsg: <a class=\"trait\" href=\"rsiot/message/trait.MsgDataBound.html\" title=\"trait rsiot::message::MsgDataBound\">MsgDataBound</a> + 'static,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.process\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rsiot/components/cmp_add_output_stream/mod.rs.html#23-34\">source</a><a href=\"#method.process\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"rsiot/executor/trait.IComponentProcess.html#tymethod.process\" class=\"fn\">process</a>&lt;'life0, 'async_trait&gt;(\n    &amp;'life0 self,\n    config: <a class=\"struct\" href=\"rsiot/components/cmp_add_output_stream/struct.Cfg.html\" title=\"struct rsiot::components::cmp_add_output_stream::Cfg\">Cfg</a>&lt;TMsg&gt;,\n    in_out: <a class=\"struct\" href=\"rsiot/executor/struct.CmpInOut.html\" title=\"struct rsiot::executor::CmpInOut\">CmpInOut</a>&lt;TMsg&gt;\n) -&gt; Pin&lt;Box&lt;dyn Future&lt;Output = Result&lt;(), <a class=\"enum\" href=\"rsiot/executor/enum.ComponentError.html\" title=\"enum rsiot::executor::ComponentError\">ComponentError</a>&gt;&gt; + 'async_trait&gt;&gt;<div class=\"where\">where\n    Self: 'async_trait,\n    'life0: 'async_trait,</div></h4></section></div></details>","IComponentProcess<Cfg<TMsg>, TMsg>","rsiot::components::cmp_add_output_stream::Cmp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IComponent%3CTMsg%3E-for-Component%3CTConfig,+TMsg%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rsiot/executor/component/single_thread.rs.html#20-41\">source</a><a href=\"#impl-IComponent%3CTMsg%3E-for-Component%3CTConfig,+TMsg%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;TConfig, TMsg&gt; <a class=\"trait\" href=\"rsiot/executor/trait.IComponent.html\" title=\"trait rsiot::executor::IComponent\">IComponent</a>&lt;TMsg&gt; for <a class=\"struct\" href=\"rsiot/executor/struct.Component.html\" title=\"struct rsiot::executor::Component\">Component</a>&lt;TConfig, TMsg&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"rsiot/executor/trait.IComponentProcess.html\" title=\"trait rsiot::executor::IComponentProcess\">IComponentProcess</a>&lt;TConfig, TMsg&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.set_interface\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rsiot/executor/component/single_thread.rs.html#24-26\">source</a><a href=\"#method.set_interface\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"rsiot/executor/trait.IComponent.html#tymethod.set_interface\" class=\"fn\">set_interface</a>(&amp;mut self, in_out: <a class=\"struct\" href=\"rsiot/executor/struct.CmpInOut.html\" title=\"struct rsiot::executor::CmpInOut\">CmpInOut</a>&lt;TMsg&gt;)</h4></section><section id=\"method.spawn\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rsiot/executor/component/single_thread.rs.html#28-40\">source</a><a href=\"#method.spawn\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"rsiot/executor/trait.IComponent.html#tymethod.spawn\" class=\"fn\">spawn</a>&lt;'life0, 'async_trait&gt;(\n    &amp;'life0 mut self\n) -&gt; Pin&lt;Box&lt;dyn Future&lt;Output = Result&lt;(), <a class=\"enum\" href=\"rsiot/executor/enum.ComponentError.html\" title=\"enum rsiot::executor::ComponentError\">ComponentError</a>&gt;&gt; + 'async_trait&gt;&gt;<div class=\"where\">where\n    Self: 'async_trait,\n    'life0: 'async_trait,</div></h4></section></div></details>","IComponent<TMsg>","rsiot::components::cmp_add_input_stream::Cmp","rsiot::components::cmp_add_output_stream::Cmp","rsiot::components::cmp_derive::component::Cmp","rsiot::components::cmp_esp_gpio_input::component::Cmp","rsiot::components::cmp_esp_wifi::component::Cmp","rsiot::components::cmp_external_fn_process::Cmp","rsiot::components::cmp_http_server_esp::component::Cmp","rsiot::components::cmp_inject_periodic::Cmp","rsiot::components::cmp_logger::Cmp","rsiot::components::cmp_storage_esp::component::Cmp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IComponentProcess%3CConfig%3CTMsg,+TStorageData%3E,+TMsg%3E-for-Component%3CConfig%3CTMsg,+TStorageData%3E,+TMsg%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rsiot/components/cmp_storage_esp/component.rs.html#33-48\">source</a><a href=\"#impl-IComponentProcess%3CConfig%3CTMsg,+TStorageData%3E,+TMsg%3E-for-Component%3CConfig%3CTMsg,+TStorageData%3E,+TMsg%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;TMsg, TStorageData&gt; <a class=\"trait\" href=\"rsiot/executor/trait.IComponentProcess.html\" title=\"trait rsiot::executor::IComponentProcess\">IComponentProcess</a>&lt;<a class=\"struct\" href=\"rsiot/components/cmp_storage_esp/struct.Config.html\" title=\"struct rsiot::components::cmp_storage_esp::Config\">Config</a>&lt;TMsg, TStorageData&gt;, TMsg&gt; for <a class=\"struct\" href=\"rsiot/executor/struct.Component.html\" title=\"struct rsiot::executor::Component\">Component</a>&lt;<a class=\"struct\" href=\"rsiot/components/cmp_storage_esp/struct.Config.html\" title=\"struct rsiot::components::cmp_storage_esp::Config\">Config</a>&lt;TMsg, TStorageData&gt;, TMsg&gt;<div class=\"where\">where\n    TMsg: <a class=\"trait\" href=\"rsiot/message/trait.MsgDataBound.html\" title=\"trait rsiot::message::MsgDataBound\">MsgDataBound</a> + 'static,\n    TStorageData: Debug + Default + <a class=\"trait\" href=\"https://docs.rs/serde/1.0.197/serde/de/trait.DeserializeOwned.html\" title=\"trait serde::de::DeserializeOwned\">DeserializeOwned</a> + PartialEq + <a class=\"trait\" href=\"rsiot/message/trait.Serialize.html\" title=\"trait rsiot::message::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.process\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rsiot/components/cmp_storage_esp/component.rs.html#39-47\">source</a><a href=\"#method.process\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"rsiot/executor/trait.IComponentProcess.html#tymethod.process\" class=\"fn\">process</a>&lt;'life0, 'async_trait&gt;(\n    &amp;'life0 self,\n    config: <a class=\"struct\" href=\"rsiot/components/cmp_storage_esp/struct.Config.html\" title=\"struct rsiot::components::cmp_storage_esp::Config\">Config</a>&lt;TMsg, TStorageData&gt;,\n    input: <a class=\"struct\" href=\"rsiot/executor/struct.CmpInOut.html\" title=\"struct rsiot::executor::CmpInOut\">CmpInOut</a>&lt;TMsg&gt;\n) -&gt; Pin&lt;Box&lt;dyn Future&lt;Output = Result&lt;(), <a class=\"enum\" href=\"rsiot/executor/enum.ComponentError.html\" title=\"enum rsiot::executor::ComponentError\">ComponentError</a>&gt;&gt; + 'async_trait&gt;&gt;<div class=\"where\">where\n    Self: 'async_trait,\n    'life0: 'async_trait,</div></h4></section></div></details>","IComponentProcess<Config<TMsg, TStorageData>, TMsg>","rsiot::components::cmp_storage_esp::component::Cmp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IComponentProcess%3CConfig%3CTMsg%3E,+TMsg%3E-for-Component%3CConfig%3CTMsg%3E,+TMsg%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rsiot/components/cmp_esp_wifi/component.rs.html#12-25\">source</a><a href=\"#impl-IComponentProcess%3CConfig%3CTMsg%3E,+TMsg%3E-for-Component%3CConfig%3CTMsg%3E,+TMsg%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;TMsg&gt; <a class=\"trait\" href=\"rsiot/executor/trait.IComponentProcess.html\" title=\"trait rsiot::executor::IComponentProcess\">IComponentProcess</a>&lt;<a class=\"struct\" href=\"rsiot/components/cmp_esp_wifi/struct.Config.html\" title=\"struct rsiot::components::cmp_esp_wifi::Config\">Config</a>&lt;TMsg&gt;, TMsg&gt; for <a class=\"struct\" href=\"rsiot/executor/struct.Component.html\" title=\"struct rsiot::executor::Component\">Component</a>&lt;<a class=\"struct\" href=\"rsiot/components/cmp_esp_wifi/struct.Config.html\" title=\"struct rsiot::components::cmp_esp_wifi::Config\">Config</a>&lt;TMsg&gt;, TMsg&gt;<div class=\"where\">where\n    TMsg: <a class=\"trait\" href=\"rsiot/message/trait.MsgDataBound.html\" title=\"trait rsiot::message::MsgDataBound\">MsgDataBound</a> + 'static,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.process\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rsiot/components/cmp_esp_wifi/component.rs.html#16-24\">source</a><a href=\"#method.process\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"rsiot/executor/trait.IComponentProcess.html#tymethod.process\" class=\"fn\">process</a>&lt;'life0, 'async_trait&gt;(\n    &amp;'life0 self,\n    config: <a class=\"struct\" href=\"rsiot/components/cmp_esp_wifi/struct.Config.html\" title=\"struct rsiot::components::cmp_esp_wifi::Config\">Config</a>&lt;TMsg&gt;,\n    in_out: <a class=\"struct\" href=\"rsiot/executor/struct.CmpInOut.html\" title=\"struct rsiot::executor::CmpInOut\">CmpInOut</a>&lt;TMsg&gt;\n) -&gt; Pin&lt;Box&lt;dyn Future&lt;Output = Result&lt;(), <a class=\"enum\" href=\"rsiot/executor/enum.ComponentError.html\" title=\"enum rsiot::executor::ComponentError\">ComponentError</a>&gt;&gt; + 'async_trait&gt;&gt;<div class=\"where\">where\n    Self: 'async_trait,\n    'life0: 'async_trait,</div></h4></section></div></details>","IComponentProcess<Config<TMsg>, TMsg>","rsiot::components::cmp_esp_wifi::component::Cmp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IComponentProcess%3CConfig%3CTMsg%3E,+TMsg%3E-for-Component%3CConfig%3CTMsg%3E,+TMsg%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rsiot/components/cmp_external_fn_process/mod.rs.html#120-134\">source</a><a href=\"#impl-IComponentProcess%3CConfig%3CTMsg%3E,+TMsg%3E-for-Component%3CConfig%3CTMsg%3E,+TMsg%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;TMsg&gt; <a class=\"trait\" href=\"rsiot/executor/trait.IComponentProcess.html\" title=\"trait rsiot::executor::IComponentProcess\">IComponentProcess</a>&lt;<a class=\"struct\" href=\"rsiot/components/cmp_external_fn_process/struct.Config.html\" title=\"struct rsiot::components::cmp_external_fn_process::Config\">Config</a>&lt;TMsg&gt;, TMsg&gt; for <a class=\"struct\" href=\"rsiot/executor/struct.Component.html\" title=\"struct rsiot::executor::Component\">Component</a>&lt;<a class=\"struct\" href=\"rsiot/components/cmp_external_fn_process/struct.Config.html\" title=\"struct rsiot::components::cmp_external_fn_process::Config\">Config</a>&lt;TMsg&gt;, TMsg&gt;<div class=\"where\">where\n    TMsg: <a class=\"trait\" href=\"rsiot/message/trait.MsgDataBound.html\" title=\"trait rsiot::message::MsgDataBound\">MsgDataBound</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.process\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rsiot/components/cmp_external_fn_process/mod.rs.html#124-133\">source</a><a href=\"#method.process\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"rsiot/executor/trait.IComponentProcess.html#tymethod.process\" class=\"fn\">process</a>&lt;'life0, 'async_trait&gt;(\n    &amp;'life0 self,\n    config: <a class=\"struct\" href=\"rsiot/components/cmp_external_fn_process/struct.Config.html\" title=\"struct rsiot::components::cmp_external_fn_process::Config\">Config</a>&lt;TMsg&gt;,\n    in_out: <a class=\"struct\" href=\"rsiot/executor/struct.CmpInOut.html\" title=\"struct rsiot::executor::CmpInOut\">CmpInOut</a>&lt;TMsg&gt;\n) -&gt; Pin&lt;Box&lt;dyn Future&lt;Output = Result&lt;(), <a class=\"enum\" href=\"rsiot/executor/enum.ComponentError.html\" title=\"enum rsiot::executor::ComponentError\">ComponentError</a>&gt;&gt; + 'async_trait&gt;&gt;<div class=\"where\">where\n    Self: 'async_trait,\n    'life0: 'async_trait,</div></h4></section></div></details>","IComponentProcess<Config<TMsg>, TMsg>","rsiot::components::cmp_external_fn_process::Cmp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IComponentProcess%3CCfg%3CTMsg%3E,+TMsg%3E-for-Component%3CCfg%3CTMsg%3E,+TMsg%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rsiot/components/cmp_add_input_stream/mod.rs.html#20-37\">source</a><a href=\"#impl-IComponentProcess%3CCfg%3CTMsg%3E,+TMsg%3E-for-Component%3CCfg%3CTMsg%3E,+TMsg%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;TMsg&gt; <a class=\"trait\" href=\"rsiot/executor/trait.IComponentProcess.html\" title=\"trait rsiot::executor::IComponentProcess\">IComponentProcess</a>&lt;<a class=\"struct\" href=\"rsiot/components/cmp_add_input_stream/struct.Cfg.html\" title=\"struct rsiot::components::cmp_add_input_stream::Cfg\">Cfg</a>&lt;TMsg&gt;, TMsg&gt; for <a class=\"struct\" href=\"rsiot/executor/struct.Component.html\" title=\"struct rsiot::executor::Component\">Component</a>&lt;<a class=\"struct\" href=\"rsiot/components/cmp_add_input_stream/struct.Cfg.html\" title=\"struct rsiot::components::cmp_add_input_stream::Cfg\">Cfg</a>&lt;TMsg&gt;, TMsg&gt;<div class=\"where\">where\n    TMsg: <a class=\"trait\" href=\"rsiot/message/trait.MsgDataBound.html\" title=\"trait rsiot::message::MsgDataBound\">MsgDataBound</a> + 'static,</div></h3></section></summary><div class=\"docblock\"><p>ะะพะผะฟะพะฝะตะฝั ะดะปั ะดะพะฑะฐะฒะปะตะฝะธั ัะพะพะฑัะตะฝะธะน ะธะท ะฟะพะฑะพัะฝะพะณะพ ะฟะพัะพะบะฐ</p>\n</div><div class=\"impl-items\"><section id=\"method.process\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rsiot/components/cmp_add_input_stream/mod.rs.html#24-36\">source</a><a href=\"#method.process\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"rsiot/executor/trait.IComponentProcess.html#tymethod.process\" class=\"fn\">process</a>&lt;'life0, 'async_trait&gt;(\n    &amp;'life0 self,\n    config: <a class=\"struct\" href=\"rsiot/components/cmp_add_input_stream/struct.Cfg.html\" title=\"struct rsiot::components::cmp_add_input_stream::Cfg\">Cfg</a>&lt;TMsg&gt;,\n    in_out: <a class=\"struct\" href=\"rsiot/executor/struct.CmpInOut.html\" title=\"struct rsiot::executor::CmpInOut\">CmpInOut</a>&lt;TMsg&gt;\n) -&gt; Pin&lt;Box&lt;dyn Future&lt;Output = Result&lt;(), <a class=\"enum\" href=\"rsiot/executor/enum.ComponentError.html\" title=\"enum rsiot::executor::ComponentError\">ComponentError</a>&gt;&gt; + 'async_trait&gt;&gt;<div class=\"where\">where\n    Self: 'async_trait,\n    'life0: 'async_trait,</div></h4></section></div></details>","IComponentProcess<Cfg<TMsg>, TMsg>","rsiot::components::cmp_add_input_stream::Cmp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IComponentProcess%3CConfig%3CTPin,+TMsg%3E,+TMsg%3E-for-Component%3CConfig%3CTPin,+TMsg%3E,+TMsg%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rsiot/components/cmp_esp_gpio_input/component.rs.html#13-27\">source</a><a href=\"#impl-IComponentProcess%3CConfig%3CTPin,+TMsg%3E,+TMsg%3E-for-Component%3CConfig%3CTPin,+TMsg%3E,+TMsg%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;TPin, TMsg&gt; <a class=\"trait\" href=\"rsiot/executor/trait.IComponentProcess.html\" title=\"trait rsiot::executor::IComponentProcess\">IComponentProcess</a>&lt;<a class=\"struct\" href=\"rsiot/components/cmp_esp_gpio_input/struct.Config.html\" title=\"struct rsiot::components::cmp_esp_gpio_input::Config\">Config</a>&lt;TPin, TMsg&gt;, TMsg&gt; for <a class=\"struct\" href=\"rsiot/executor/struct.Component.html\" title=\"struct rsiot::executor::Component\">Component</a>&lt;<a class=\"struct\" href=\"rsiot/components/cmp_esp_gpio_input/struct.Config.html\" title=\"struct rsiot::components::cmp_esp_gpio_input::Config\">Config</a>&lt;TPin, TMsg&gt;, TMsg&gt;<div class=\"where\">where\n    TMsg: <a class=\"trait\" href=\"rsiot/message/trait.MsgDataBound.html\" title=\"trait rsiot::message::MsgDataBound\">MsgDataBound</a> + 'static,\n    TPin: InputPin,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.process\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rsiot/components/cmp_esp_gpio_input/component.rs.html#18-26\">source</a><a href=\"#method.process\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"rsiot/executor/trait.IComponentProcess.html#tymethod.process\" class=\"fn\">process</a>&lt;'life0, 'async_trait&gt;(\n    &amp;'life0 self,\n    config: <a class=\"struct\" href=\"rsiot/components/cmp_esp_gpio_input/struct.Config.html\" title=\"struct rsiot::components::cmp_esp_gpio_input::Config\">Config</a>&lt;TPin, TMsg&gt;,\n    in_out: <a class=\"struct\" href=\"rsiot/executor/struct.CmpInOut.html\" title=\"struct rsiot::executor::CmpInOut\">CmpInOut</a>&lt;TMsg&gt;\n) -&gt; Pin&lt;Box&lt;dyn Future&lt;Output = Result&lt;(), <a class=\"enum\" href=\"rsiot/executor/enum.ComponentError.html\" title=\"enum rsiot::executor::ComponentError\">ComponentError</a>&gt;&gt; + 'async_trait&gt;&gt;<div class=\"where\">where\n    Self: 'async_trait,\n    'life0: 'async_trait,</div></h4></section></div></details>","IComponentProcess<Config<TPin, TMsg>, TMsg>","rsiot::components::cmp_esp_gpio_input::component::Cmp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IComponentProcess%3CConfig%3CTMsg%3E,+TMsg%3E-for-Component%3CConfig%3CTMsg%3E,+TMsg%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rsiot/components/cmp_http_server_esp/component.rs.html#12-25\">source</a><a href=\"#impl-IComponentProcess%3CConfig%3CTMsg%3E,+TMsg%3E-for-Component%3CConfig%3CTMsg%3E,+TMsg%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;TMsg&gt; <a class=\"trait\" href=\"rsiot/executor/trait.IComponentProcess.html\" title=\"trait rsiot::executor::IComponentProcess\">IComponentProcess</a>&lt;<a class=\"struct\" href=\"rsiot/components/cmp_http_server_esp/struct.Config.html\" title=\"struct rsiot::components::cmp_http_server_esp::Config\">Config</a>&lt;TMsg&gt;, TMsg&gt; for <a class=\"struct\" href=\"rsiot/executor/struct.Component.html\" title=\"struct rsiot::executor::Component\">Component</a>&lt;<a class=\"struct\" href=\"rsiot/components/cmp_http_server_esp/struct.Config.html\" title=\"struct rsiot::components::cmp_http_server_esp::Config\">Config</a>&lt;TMsg&gt;, TMsg&gt;<div class=\"where\">where\n    TMsg: <a class=\"trait\" href=\"rsiot/message/trait.MsgDataBound.html\" title=\"trait rsiot::message::MsgDataBound\">MsgDataBound</a> + 'static,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.process\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rsiot/components/cmp_http_server_esp/component.rs.html#16-24\">source</a><a href=\"#method.process\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"rsiot/executor/trait.IComponentProcess.html#tymethod.process\" class=\"fn\">process</a>&lt;'life0, 'async_trait&gt;(\n    &amp;'life0 self,\n    config: <a class=\"struct\" href=\"rsiot/components/cmp_http_server_esp/struct.Config.html\" title=\"struct rsiot::components::cmp_http_server_esp::Config\">Config</a>&lt;TMsg&gt;,\n    in_out: <a class=\"struct\" href=\"rsiot/executor/struct.CmpInOut.html\" title=\"struct rsiot::executor::CmpInOut\">CmpInOut</a>&lt;TMsg&gt;\n) -&gt; Pin&lt;Box&lt;dyn Future&lt;Output = Result&lt;(), <a class=\"enum\" href=\"rsiot/executor/enum.ComponentError.html\" title=\"enum rsiot::executor::ComponentError\">ComponentError</a>&gt;&gt; + 'async_trait&gt;&gt;<div class=\"where\">where\n    Self: 'async_trait,\n    'life0: 'async_trait,</div></h4></section></div></details>","IComponentProcess<Config<TMsg>, TMsg>","rsiot::components::cmp_http_server_esp::component::Cmp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IComponentProcess%3CConfig,+TMessage%3E-for-Component%3CConfig,+TMessage%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rsiot/components/cmp_logger/mod.rs.html#22-37\">source</a><a href=\"#impl-IComponentProcess%3CConfig,+TMessage%3E-for-Component%3CConfig,+TMessage%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;TMessage&gt; <a class=\"trait\" href=\"rsiot/executor/trait.IComponentProcess.html\" title=\"trait rsiot::executor::IComponentProcess\">IComponentProcess</a>&lt;<a class=\"struct\" href=\"rsiot/components/cmp_logger/struct.Config.html\" title=\"struct rsiot::components::cmp_logger::Config\">Config</a>, TMessage&gt; for <a class=\"struct\" href=\"rsiot/executor/struct.Component.html\" title=\"struct rsiot::executor::Component\">Component</a>&lt;<a class=\"struct\" href=\"rsiot/components/cmp_logger/struct.Config.html\" title=\"struct rsiot::components::cmp_logger::Config\">Config</a>, TMessage&gt;<div class=\"where\">where\n    TMessage: <a class=\"trait\" href=\"rsiot/message/trait.MsgDataBound.html\" title=\"trait rsiot::message::MsgDataBound\">MsgDataBound</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.process\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rsiot/components/cmp_logger/mod.rs.html#26-36\">source</a><a href=\"#method.process\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"rsiot/executor/trait.IComponentProcess.html#tymethod.process\" class=\"fn\">process</a>&lt;'life0, 'async_trait&gt;(\n    &amp;'life0 self,\n    config: <a class=\"struct\" href=\"rsiot/components/cmp_logger/struct.Config.html\" title=\"struct rsiot::components::cmp_logger::Config\">Config</a>,\n    in_out: <a class=\"struct\" href=\"rsiot/executor/struct.CmpInOut.html\" title=\"struct rsiot::executor::CmpInOut\">CmpInOut</a>&lt;TMessage&gt;\n) -&gt; Pin&lt;Box&lt;dyn Future&lt;Output = Result&lt;(), <a class=\"enum\" href=\"rsiot/executor/enum.ComponentError.html\" title=\"enum rsiot::executor::ComponentError\">ComponentError</a>&gt;&gt; + 'async_trait&gt;&gt;<div class=\"where\">where\n    Self: 'async_trait,\n    'life0: 'async_trait,</div></h4></section></div></details>","IComponentProcess<Config, TMessage>","rsiot::components::cmp_logger::Cmp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IComponentProcess%3CConfig%3CTMsg%3E,+TMsg%3E-for-Component%3CConfig%3CTMsg%3E,+TMsg%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rsiot/components/cmp_derive/component.rs.html#12-28\">source</a><a href=\"#impl-IComponentProcess%3CConfig%3CTMsg%3E,+TMsg%3E-for-Component%3CConfig%3CTMsg%3E,+TMsg%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;TMsg&gt; <a class=\"trait\" href=\"rsiot/executor/trait.IComponentProcess.html\" title=\"trait rsiot::executor::IComponentProcess\">IComponentProcess</a>&lt;<a class=\"struct\" href=\"rsiot/components/cmp_derive/struct.Config.html\" title=\"struct rsiot::components::cmp_derive::Config\">Config</a>&lt;TMsg&gt;, TMsg&gt; for <a class=\"struct\" href=\"rsiot/executor/struct.Component.html\" title=\"struct rsiot::executor::Component\">Component</a>&lt;<a class=\"struct\" href=\"rsiot/components/cmp_derive/struct.Config.html\" title=\"struct rsiot::components::cmp_derive::Config\">Config</a>&lt;TMsg&gt;, TMsg&gt;<div class=\"where\">where\n    TMsg: <a class=\"trait\" href=\"rsiot/message/trait.MsgDataBound.html\" title=\"trait rsiot::message::MsgDataBound\">MsgDataBound</a> + 'static,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.process\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rsiot/components/cmp_derive/component.rs.html#16-27\">source</a><a href=\"#method.process\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"rsiot/executor/trait.IComponentProcess.html#tymethod.process\" class=\"fn\">process</a>&lt;'life0, 'async_trait&gt;(\n    &amp;'life0 self,\n    config: <a class=\"struct\" href=\"rsiot/components/cmp_derive/struct.Config.html\" title=\"struct rsiot::components::cmp_derive::Config\">Config</a>&lt;TMsg&gt;,\n    in_out: <a class=\"struct\" href=\"rsiot/executor/struct.CmpInOut.html\" title=\"struct rsiot::executor::CmpInOut\">CmpInOut</a>&lt;TMsg&gt;\n) -&gt; Pin&lt;Box&lt;dyn Future&lt;Output = Result&lt;(), <a class=\"enum\" href=\"rsiot/executor/enum.ComponentError.html\" title=\"enum rsiot::executor::ComponentError\">ComponentError</a>&gt;&gt; + 'async_trait&gt;&gt;<div class=\"where\">where\n    Self: 'async_trait,\n    'life0: 'async_trait,</div></h4></section></div></details>","IComponentProcess<Config<TMsg>, TMsg>","rsiot::components::cmp_derive::component::Cmp"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()